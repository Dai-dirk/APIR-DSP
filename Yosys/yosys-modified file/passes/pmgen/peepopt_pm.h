// Generated by pmgen.py from passes/pmgen/peepopt_shiftmul.pmg
// Generated by pmgen.py from passes/pmgen/peepopt_muldiv.pmg

struct peepopt_pm {
  Module *module;
  SigMap sigmap;
  std::function<void()> on_accept;
  bool setup_done;
  bool generate_mode;
  int accept_cnt;

  uint32_t rngseed;
  int rng(unsigned int n) {
    rngseed ^= rngseed << 13;
    rngseed ^= rngseed >> 17;
    rngseed ^= rngseed << 5;
    return rngseed % n;
  }

  typedef std::tuple<> index_0_key_type;
  typedef std::tuple<Cell*> index_0_value_type;
  dict<index_0_key_type, vector<index_0_value_type>> index_0;
  typedef std::tuple<SigSpec> index_2_key_type;
  typedef std::tuple<Cell*> index_2_value_type;
  dict<index_2_key_type, vector<index_2_value_type>> index_2;
  typedef std::tuple<> index_5_key_type;
  typedef std::tuple<Cell*> index_5_value_type;
  dict<index_5_key_type, vector<index_5_value_type>> index_5;
  typedef std::tuple<SigSpec, SigSpec> index_7_key_type;
  typedef std::tuple<Cell*> index_7_value_type;
  dict<index_7_key_type, vector<index_7_value_type>> index_7;
  dict<SigBit, pool<Cell*>> sigusers;
  pool<Cell*> blacklist_cells;
  pool<Cell*> autoremove_cells;
  dict<Cell*,int> rollback_cache;
  int rollback;

  struct state_muldiv_t {
    Cell* div;
    bool is_signed;
    Cell* mul;
    SigSpec t;
    SigSpec x;
    SigSpec y;
  } st_muldiv;

  struct udata_muldiv_t {
  } ud_muldiv;

  struct state_shiftmul_t {
    Cell* mul;
    SigSpec shamt;
    Cell* shift;
  } st_shiftmul;

  struct udata_shiftmul_t {
  } ud_shiftmul;

  IdString id_b_A{"\\A"};
  IdString id_b_A_SIGNED{"\\A_SIGNED"};
  IdString id_b_A_WIDTH{"\\A_WIDTH"};
  IdString id_b_B{"\\B"};
  IdString id_b_B_SIGNED{"\\B_SIGNED"};
  IdString id_b_B_WIDTH{"\\B_WIDTH"};
  IdString id_b_Y{"\\Y"};
  IdString id_d_div{"$div"};
  IdString id_d_mul{"$mul"};
  IdString id_d_shift{"$shift"};
  IdString id_d_shiftx{"$shiftx"};
  IdString id_d_shr{"$shr"};

  void add_siguser(const SigSpec &sig, Cell *cell) {
    for (auto bit : sigmap(sig)) {
      if (bit.wire == nullptr) continue;
      sigusers[bit].insert(cell);
    }
  }

  void blacklist(Cell *cell) {
    if (cell != nullptr && blacklist_cells.insert(cell).second) {
      auto ptr = rollback_cache.find(cell);
      if (ptr == rollback_cache.end()) return;
      int rb = ptr->second;
      if (rollback == 0 || rollback > rb)
        rollback = rb;
    }
  }

  void autoremove(Cell *cell) {
    if (cell != nullptr) {
      autoremove_cells.insert(cell);
      blacklist(cell);
    }
  }

  SigSpec port(Cell *cell, IdString portname) {
    return sigmap(cell->getPort(portname));
  }

  SigSpec port(Cell *cell, IdString portname, const SigSpec& defval) {
    return sigmap(cell->connections_.at(portname, defval));
  }

  Const param(Cell *cell, IdString paramname) {
    return cell->getParam(paramname);
  }

  Const param(Cell *cell, IdString paramname, const Const& defval) {
    return cell->parameters.at(paramname, defval);
  }

  int nusers(const SigSpec &sig) {
    pool<Cell*> users;
    for (auto bit : sigmap(sig))
      for (auto user : sigusers[bit])
        users.insert(user);
    return GetSize(users);
  }

  peepopt_pm(Module *module, const vector<Cell*> &cells) :
      module(module), sigmap(module), setup_done(false), generate_mode(false), rngseed(12345678) {
    setup(cells);
  }

  peepopt_pm(Module *module) :
      module(module), sigmap(module), setup_done(false), generate_mode(false), rngseed(12345678) {
  }

  void setup(const vector<Cell*> &cells) {
    log_assert(!setup_done);
    setup_done = true;
    for (auto port : module->ports)
      add_siguser(module->wire(port), nullptr);
    for (auto cell : module->cells())
      for (auto &conn : cell->connections())
        add_siguser(conn.second, cell);
    for (auto cell : cells) {
      do {
        Cell *shift = cell;
        index_0_value_type value;
        std::get<0>(value) = cell;
        if (!(shift->type.in(id_d_shift, id_d_shiftx, id_d_shr))) continue;
        index_0_key_type key;
        index_0[key].push_back(value);
      } while (0);
      do {
        Cell *mul = cell;
        index_2_value_type value;
        std::get<0>(value) = cell;
        if (!(mul->type.in(id_d_mul))) continue;
        if (!(port(mul, id_b_A).is_fully_const() || port(mul, id_b_B).is_fully_const())) continue;
        index_2_key_type key;
        std::get<0>(key) = port(mul, id_b_Y);
        index_2[key].push_back(value);
      } while (0);
      do {
        Cell *mul = cell;
        index_5_value_type value;
        std::get<0>(value) = cell;
        if (!(mul->type == id_d_mul)) continue;
        if (!(GetSize(port(mul, id_b_A)) + GetSize(port(mul, id_b_B)) <= GetSize(port(mul, id_b_Y)))) continue;
        index_5_key_type key;
        index_5[key].push_back(value);
      } while (0);
      do {
        Cell *div = cell;
        index_7_value_type value;
        std::get<0>(value) = cell;
        if (!(div->type.in(id_d_div))) continue;
        index_7_key_type key;
        std::get<0>(key) = port(div, id_b_A);
        std::get<1>(key) = port(div, id_b_B);
        index_7[key].push_back(value);
      } while (0);
    }
  }

  ~peepopt_pm() {
    for (auto cell : autoremove_cells)
      module->remove(cell);
  }

  int run_muldiv(std::function<void()> on_accept_f) {
    log_assert(setup_done);
    accept_cnt = 0;
    on_accept = on_accept_f;
    rollback = 0;
    st_muldiv.div = nullptr;
    st_muldiv.is_signed = bool();
    st_muldiv.mul = nullptr;
    st_muldiv.t = SigSpec();
    st_muldiv.x = SigSpec();
    st_muldiv.y = SigSpec();
    block_5(1);
    log_assert(rollback_cache.empty());
    return accept_cnt;
  }

  int run_muldiv(std::function<void(peepopt_pm&)> on_accept_f) {
    return run_muldiv([&](){on_accept_f(*this);});
  }

  int run_muldiv() {
    return run_muldiv([](){});
  }

  int run_shiftmul(std::function<void()> on_accept_f) {
    log_assert(setup_done);
    accept_cnt = 0;
    on_accept = on_accept_f;
    rollback = 0;
    st_shiftmul.mul = nullptr;
    st_shiftmul.shamt = SigSpec();
    st_shiftmul.shift = nullptr;
    block_0(1);
    log_assert(rollback_cache.empty());
    return accept_cnt;
  }

  int run_shiftmul(std::function<void(peepopt_pm&)> on_accept_f) {
    return run_shiftmul([&](){on_accept_f(*this);});
  }

  int run_shiftmul() {
    return run_shiftmul([](){});
  }

  void block_subpattern_muldiv_(int recursion) { block_5(recursion); }
  void block_subpattern_shiftmul_(int recursion) { block_0(recursion); }

  // passes/pmgen/peepopt_shiftmul.pmg:8
  void block_0(int recursion YS_MAYBE_UNUSED) {
    Cell* &shift YS_MAYBE_UNUSED = st_shiftmul.shift;
    Cell* _pmg_backup_shift = shift;

    index_0_key_type key;
    auto cells_ptr = index_0.find(key);

    if (cells_ptr != index_0.end()) {
      const vector<index_0_value_type> &cells = cells_ptr->second;
      for (int _pmg_idx = 0; _pmg_idx < GetSize(cells); _pmg_idx++) {
        shift = std::get<0>(cells[_pmg_idx]);
        if (blacklist_cells.count(shift)) continue;
        auto rollback_ptr = rollback_cache.insert(make_pair(std::get<0>(cells[_pmg_idx]), recursion));
        block_1(recursion+1);
        if (rollback_ptr.second)
          rollback_cache.erase(rollback_ptr.first);
        if (rollback) {
          if (rollback != recursion) {
            shift = _pmg_backup_shift;
            return;
          }
          rollback = 0;
        }
      }
    }

    shift = nullptr;
    shift = _pmg_backup_shift;
  }

  // passes/pmgen/peepopt_shiftmul.pmg:12
  void block_1(int recursion YS_MAYBE_UNUSED) {
    Cell* const &shift YS_MAYBE_UNUSED = st_shiftmul.shift;
    SigSpec &shamt YS_MAYBE_UNUSED = st_shiftmul.shamt;

#define reject do { goto rollback_label; } while(0)
#define accept do { accept_cnt++; on_accept(); if (rollback) goto rollback_label; } while(0)
#define finish do { rollback = -1; goto rollback_label; } while(0)
#define branch do { block_2(recursion+1); if (rollback) goto rollback_label; } while(0)
#define subpattern(pattern_name) do { block_subpattern_shiftmul_ ## pattern_name (recursion+1); if (rollback) goto rollback_label; } while(0)
    shamt = port(shift, id_b_B);
    if (shamt.empty())
      reject;
    if (shamt[GetSize(shamt)-1] == State::S0) {
      do {
        shamt.remove(GetSize(shamt)-1);
        if (shamt.empty())
          reject;
      } while (shamt[GetSize(shamt)-1] == State::S0);
    } else
    if (shift->type.in(id_d_shift, id_d_shiftx) && param(shift, id_b_B_SIGNED).as_bool()) {
      reject;
    }
    if (GetSize(shamt) > 20)
      reject;

    block_2(recursion+1);
#undef reject
#undef accept
#undef finish
#undef branch
#undef subpattern

rollback_label:
    YS_MAYBE_UNUSED;

    shamt = SigSpec();
  }

  // passes/pmgen/peepopt_shiftmul.pmg:30
  void block_2(int recursion YS_MAYBE_UNUSED) {
    const SigSpec &shamt YS_MAYBE_UNUSED = st_shiftmul.shamt;
    Cell* const &shift YS_MAYBE_UNUSED = st_shiftmul.shift;
    Cell* &mul YS_MAYBE_UNUSED = st_shiftmul.mul;
    Cell* _pmg_backup_mul = mul;

    index_2_key_type key;
    std::get<0>(key) = shamt;
    auto cells_ptr = index_2.find(key);

    if (cells_ptr != index_2.end()) {
      const vector<index_2_value_type> &cells = cells_ptr->second;
      for (int _pmg_idx = 0; _pmg_idx < GetSize(cells); _pmg_idx++) {
        mul = std::get<0>(cells[_pmg_idx]);
        if (blacklist_cells.count(mul)) continue;
        if (!(!param(mul, id_b_A_SIGNED).as_bool())) continue;
        auto rollback_ptr = rollback_cache.insert(make_pair(std::get<0>(cells[_pmg_idx]), recursion));
        block_3(recursion+1);
        if (rollback_ptr.second)
          rollback_cache.erase(rollback_ptr.first);
        if (rollback) {
          if (rollback != recursion) {
            mul = _pmg_backup_mul;
            return;
          }
          rollback = 0;
        }
      }
    }

    mul = nullptr;
    mul = _pmg_backup_mul;
  }

  // passes/pmgen/peepopt_shiftmul.pmg:37
  void block_3(int recursion YS_MAYBE_UNUSED) {
    Cell* const &mul YS_MAYBE_UNUSED = st_shiftmul.mul;
    const SigSpec &shamt YS_MAYBE_UNUSED = st_shiftmul.shamt;
    Cell* const &shift YS_MAYBE_UNUSED = st_shiftmul.shift;

#define reject do { goto rollback_label; } while(0)
#define accept do { accept_cnt++; on_accept(); if (rollback) goto rollback_label; } while(0)
#define finish do { rollback = -1; goto rollback_label; } while(0)
#define branch do { block_4(recursion+1); if (rollback) goto rollback_label; } while(0)
#define subpattern(pattern_name) do { block_subpattern_shiftmul_ ## pattern_name (recursion+1); if (rollback) goto rollback_label; } while(0)
  {
    IdString const_factor_port = port(mul, id_b_A).is_fully_const() ? id_b_A : id_b_B;
    Const const_factor_cnst = port(mul, const_factor_port).as_const();
    int const_factor = const_factor_cnst.as_int();
    if (GetSize(const_factor_cnst) == 0)
      reject;
    if (GetSize(const_factor_cnst) > 20)
      reject;
    if (GetSize(port(shift, id_b_Y)) > const_factor)
      reject;
    int factor_bits = ceil_log2(const_factor);
    SigSpec mul_din = port(mul, const_factor_port == id_b_A ? id_b_B : id_b_A);
    if (GetSize(shamt) < factor_bits+GetSize(mul_din))
      reject;
    did_something = true;
    log("shiftmul pattern in %s: shift=%s, mul=%s\n", log_id(module), log_id(shift), log_id(mul));
    int new_const_factor = 1 << factor_bits;
    SigSpec padding(State::Sx, new_const_factor-const_factor);
    SigSpec old_a = port(shift, id_b_A), new_a;
    int trunc = 0;
    if (GetSize(old_a) % const_factor != 0) {
      trunc = const_factor - GetSize(old_a) % const_factor;
      old_a.append(SigSpec(State::Sx, trunc));
    }
    for (int i = 0; i*const_factor < GetSize(old_a); i++) {
      SigSpec slice = old_a.extract(i*const_factor, const_factor);
      new_a.append(slice);
      new_a.append(padding);
    }
    if (trunc > 0)
      new_a.remove(GetSize(new_a)-trunc, trunc);
    SigSpec new_b = {mul_din, SigSpec(State::S0, factor_bits)};
    if (param(shift, id_b_B_SIGNED).as_bool())
      new_b.append(State::S0);
    shift->setPort(id_b_A, new_a);
    shift->setParam(id_b_A_WIDTH, GetSize(new_a));
    shift->setPort(id_b_B, new_b);
    shift->setParam(id_b_B_WIDTH, GetSize(new_b));
    blacklist(shift);
    accept;
  }

    block_4(recursion+1);
#undef reject
#undef accept
#undef finish
#undef branch
#undef subpattern

rollback_label:
    YS_MAYBE_UNUSED;
  }

  void block_4(int recursion YS_MAYBE_UNUSED) {
  }

  // passes/pmgen/peepopt_muldiv.pmg:6
  void block_5(int recursion YS_MAYBE_UNUSED) {
    Cell* &mul YS_MAYBE_UNUSED = st_muldiv.mul;
    Cell* _pmg_backup_mul = mul;

    index_5_key_type key;
    auto cells_ptr = index_5.find(key);

    if (cells_ptr != index_5.end()) {
      const vector<index_5_value_type> &cells = cells_ptr->second;
      for (int _pmg_idx = 0; _pmg_idx < GetSize(cells); _pmg_idx++) {
        mul = std::get<0>(cells[_pmg_idx]);
        if (blacklist_cells.count(mul)) continue;
        auto rollback_ptr = rollback_cache.insert(make_pair(std::get<0>(cells[_pmg_idx]), recursion));
        block_6(recursion+1);
        if (rollback_ptr.second)
          rollback_cache.erase(rollback_ptr.first);
        if (rollback) {
          if (rollback != recursion) {
            mul = _pmg_backup_mul;
            return;
          }
          rollback = 0;
        }
      }
    }

    mul = nullptr;
    mul = _pmg_backup_mul;
  }

  // passes/pmgen/peepopt_muldiv.pmg:11
  void block_6(int recursion YS_MAYBE_UNUSED) {
    Cell* const &mul YS_MAYBE_UNUSED = st_muldiv.mul;
    bool &is_signed YS_MAYBE_UNUSED = st_muldiv.is_signed;
    SigSpec &t YS_MAYBE_UNUSED = st_muldiv.t;
    SigSpec &x YS_MAYBE_UNUSED = st_muldiv.x;
    SigSpec &y YS_MAYBE_UNUSED = st_muldiv.y;

#define reject do { goto rollback_label; } while(0)
#define accept do { accept_cnt++; on_accept(); if (rollback) goto rollback_label; } while(0)
#define finish do { rollback = -1; goto rollback_label; } while(0)
#define branch do { block_7(recursion+1); if (rollback) goto rollback_label; } while(0)
#define subpattern(pattern_name) do { block_subpattern_muldiv_ ## pattern_name (recursion+1); if (rollback) goto rollback_label; } while(0)
    t = port(mul, id_b_Y);
    x = port(mul, id_b_A);
    y = port(mul, id_b_B);
    is_signed = param(mul, id_b_A_SIGNED).as_bool();
    branch;
    std::swap(x, y);

    block_7(recursion+1);
#undef reject
#undef accept
#undef finish
#undef branch
#undef subpattern

rollback_label:
    YS_MAYBE_UNUSED;

    is_signed = bool();
    t = SigSpec();
    x = SigSpec();
    y = SigSpec();
  }

  // passes/pmgen/peepopt_muldiv.pmg:20
  void block_7(int recursion YS_MAYBE_UNUSED) {
    const bool &is_signed YS_MAYBE_UNUSED = st_muldiv.is_signed;
    Cell* const &mul YS_MAYBE_UNUSED = st_muldiv.mul;
    const SigSpec &t YS_MAYBE_UNUSED = st_muldiv.t;
    const SigSpec &x YS_MAYBE_UNUSED = st_muldiv.x;
    const SigSpec &y YS_MAYBE_UNUSED = st_muldiv.y;
    Cell* &div YS_MAYBE_UNUSED = st_muldiv.div;
    Cell* _pmg_backup_div = div;

    index_7_key_type key;
    std::get<0>(key) = t;
    std::get<1>(key) = x;
    auto cells_ptr = index_7.find(key);

    if (cells_ptr != index_7.end()) {
      const vector<index_7_value_type> &cells = cells_ptr->second;
      for (int _pmg_idx = 0; _pmg_idx < GetSize(cells); _pmg_idx++) {
        div = std::get<0>(cells[_pmg_idx]);
        if (blacklist_cells.count(div)) continue;
        if (!(param(div, id_b_A_SIGNED).as_bool() == is_signed)) continue;
        auto rollback_ptr = rollback_cache.insert(make_pair(std::get<0>(cells[_pmg_idx]), recursion));
        block_8(recursion+1);
        if (rollback_ptr.second)
          rollback_cache.erase(rollback_ptr.first);
        if (rollback) {
          if (rollback != recursion) {
            div = _pmg_backup_div;
            return;
          }
          rollback = 0;
        }
      }
    }

    div = nullptr;
    div = _pmg_backup_div;
  }

  // passes/pmgen/peepopt_muldiv.pmg:27
  void block_8(int recursion YS_MAYBE_UNUSED) {
    Cell* const &div YS_MAYBE_UNUSED = st_muldiv.div;
    const bool &is_signed YS_MAYBE_UNUSED = st_muldiv.is_signed;
    Cell* const &mul YS_MAYBE_UNUSED = st_muldiv.mul;
    const SigSpec &t YS_MAYBE_UNUSED = st_muldiv.t;
    const SigSpec &x YS_MAYBE_UNUSED = st_muldiv.x;
    const SigSpec &y YS_MAYBE_UNUSED = st_muldiv.y;

#define reject do { goto rollback_label; } while(0)
#define accept do { accept_cnt++; on_accept(); if (rollback) goto rollback_label; } while(0)
#define finish do { rollback = -1; goto rollback_label; } while(0)
#define branch do { block_9(recursion+1); if (rollback) goto rollback_label; } while(0)
#define subpattern(pattern_name) do { block_subpattern_muldiv_ ## pattern_name (recursion+1); if (rollback) goto rollback_label; } while(0)
    SigSpec div_y = port(div, id_b_Y);
    SigSpec val_y = y;
    if (GetSize(div_y) != GetSize(val_y))
      val_y.extend_u0(GetSize(div_y), param(div, id_b_A_SIGNED).as_bool());
    did_something = true;
    log("muldiv pattern in %s: mul=%s, div=%s\n", log_id(module), log_id(mul), log_id(div));
    module->connect(div_y, val_y);
    autoremove(div);
    accept;

    block_9(recursion+1);
#undef reject
#undef accept
#undef finish
#undef branch
#undef subpattern

rollback_label:
    YS_MAYBE_UNUSED;
  }

  void block_9(int recursion YS_MAYBE_UNUSED) {
  }
};
