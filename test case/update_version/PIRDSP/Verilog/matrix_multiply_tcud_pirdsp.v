// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps
module matrix_multiply_tcud_pirdsp(
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



matrix_multiply_tcud_pirdsp_1 matrix_multiply_tcud_DSP48_1_U(
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

`timescale 1 ns / 1 ps

module matrix_multiply_tcud_pirdsp_1(
    input  [9 - 1:0] in0,
    input  [9 - 1:0] in1,
    input  [8 - 1:0] in2,
    output [17 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [27 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;


assign a  = $signed(in0);
assign b  = $signed(in1);


assign c  = $unsigned(in2);

wire [53:0] A;
wire [53:0] B;

assign A ={a,a};
assign B ={b,b};

MULT54X54 inst(
    .A(A),
    .B(B),
    .Y(m)
);

assign p  = m + c;

assign dout = p;

endmodule

/*
(* techmap_celltype = "$mul $__mul $__MULT9X9" *)
module MULT54X54(
        input [53:0] A,
        input [53:0] B,
        output [44:0] Y
 );

wire signed [17:0] C_0;
wire signed [17:0] C_1;
wire signed [17:0] C_2;
wire signed [17:0] C_3;
wire signed [17:0] C_4;
wire signed [17:0] C_5;

wire signed [8:0] A_0 = A[8:0];
wire signed [8:0] B_0 = B[8:0];
wire signed [8:0] A_1 = A[17:9];
wire signed [8:0] B_1 = B[17:9];
wire signed [8:0] A_2 = A[26:18];
wire signed [8:0] B_2 = B[26:18];
wire signed [8:0] A_3 = A[35:27];
wire signed [8:0] B_3 = B[35:27];
wire signed [8:0] A_4 = A[44:36];
wire signed [8:0] B_4 = B[44:36];
wire signed [8:0] A_5 = A[53:45];
wire signed [8:0] B_5 = B[53:45];

assign C_0 = A_0 * B_0;
assign C_1 = A_1 * B_1;
assign C_2 = A_2 * B_2;
assign C_3 = A_3 * B_3;
assign C_4 = A_4 * B_4;
assign C_5 = A_5 * B_5;

assign Y[44:24] = C_5 + C_4 + C_3;
assign Y[23:0] = C_2 + C_1 + C_0;

endmodule

*/